{"version":3,"sources":["../../src/date-simplify/DateSimplifyService.ts"],"names":["getDateRangeLimitUTC","dateRange","ChangeDate","DiffYear","actualYear","Date","getUTCFullYear","firstDayOfYear","Number","getDateRangeLimitLocal","getFullYear","dateFormat","documentFormat","match","RegexEnum","FORMAT_DATE","replace","dateFormatNew","dateRequest","formatStyle","day","month","year","console","log","dateFormatISO","toISOString","dateIsValid","dateIsValidFix","dayParser","monthParser","yearParser"],"mappings":"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","sourcesContent":["import { format, isValid } from 'date-fns';\nimport { checkDateMatch, dateCheck, dateSplitter } from '../commons/utils';\nimport { RegexEnum } from '../commons/regex.enum';\n\n\n\nexport function getDateRangeLimitUTC(dateRange: number, ChangeDate?: string): string {\n    let DiffYear = 0;\n    let actualYear = 0;\n\n    if (ChangeDate) {\n        actualYear = new Date(ChangeDate).getUTCFullYear();\n    }\n    if (!ChangeDate) {\n        actualYear = new Date().getUTCFullYear();\n    }\n\n    if (dateRange) {\n        if (dateRange <= 0 || !dateRange) {\n            return 'Invalid Age';\n        }\n        const firstDayOfYear = new Date(actualYear, 0, 1);\n        DiffYear = Number(firstDayOfYear.getUTCFullYear() - Number(dateRange));\n        return format(new Date(DiffYear, 0, 1), 'yyyy');\n    }\n    return \"Invalid Range\";\n}\n\nexport function getDateRangeLimitLocal(dateRange: number, ChangeDate?: string): string {\n    let DiffYear = 0;\n    let actualYear = 0;\n    if (ChangeDate) {\n        actualYear = new Date(ChangeDate).getFullYear();\n    }\n    if (!ChangeDate) {\n        actualYear = new Date().getFullYear();\n    }\n\n    if (dateRange) {\n        if (dateRange <= 0) {\n            return 'Invalid Age';\n        }\n        const firstDayOfYear = new Date(actualYear, 0, 1);\n        DiffYear = Number(firstDayOfYear.getFullYear() - Number(dateRange));\n        return format(new Date(DiffYear, 0, 1), 'yyyy');\n    }\n    return \"Invalid Range\";\n}\n\nexport function dateFormat(documentFormat: string): string | undefined {\n    if (documentFormat) {\n        if (documentFormat.match(RegexEnum.FORMAT_DATE)) {\n            documentFormat = documentFormat.replace(RegexEnum.FORMAT_DATE, \"$1/$2/$3\");\n\n        }\n        if (!isValid(new Date(documentFormat))) {\n            return documentFormat;\n        }\n\n        return format(new Date(documentFormat), 'yyyy/dd/MM');\n    }\n    return 'Error';\n}\n\n\nexport function dateFormatNew(dateRequest: string, formatStyle: string): string {\n\n    let [day, month, year] = dateSplitter(dateRequest)\n    day = dateCheck(Number(day), \"day\")\n    month = dateCheck(Number(month), \"month\")\n    year = dateCheck(Number(year), \"year\")\n\n    switch (formatStyle) {\n        case 'ddMMyyyy': {\n            console.log(\"a\")\n            return `${day}${month}${year}`\n        }\n        case 'dd-MM-yyyy': {\n            console.log(\"b\")\n            return `${day}-${month}-${year}`\n        }\n        case 'dd/MM/yyyy': {\n            console.log(\"c\")\n            return `${day}/${month}/${year}`\n        }\n        default: {\n            console.log(\"d\")\n            return dateRequest\n        }\n    }\n}\n\n\nexport function dateFormatISO(documentFormat: string): string | undefined {\n    if (documentFormat) {\n        if (documentFormat.match(RegexEnum.FORMAT_DATE)) {\n            documentFormat = documentFormat.replace(RegexEnum.FORMAT_DATE, \"$1/$2/$3\");\n\n        }\n        if (!isValid(new Date(documentFormat))) {\n            return documentFormat;\n        }\n\n        return new Date(documentFormat).toISOString();\n    }\n    return 'Error';\n}\nexport function dateIsValid(day: string, month: string, year: string): boolean {\n    return isValid(new Date(`${day}/${month}/${year}`));\n}\n\nexport function dateIsValidFix(day: string, month: string, year: string): string {\n    let dayParser = dateCheck(Number(day), 'day');\n    let monthParser = dateCheck(Number(month), 'month');\n    let yearParser = Number(year);\n    return `${dayParser}/${monthParser}/${yearParser}`;\n}\n\n\n\n\n"],"file":"DateSimplifyService.js"}